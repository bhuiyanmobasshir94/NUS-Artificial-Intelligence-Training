import pandas as pdimport scipy.sparse as sparseimport numpy as npimport implicitimport osdef maptrans(trans):    uniqueusers = np.sort(trans['user'].unique())    uniqueitems = np.sort(trans['item'].unique())    umap = dict(zip(uniqueusers,[i for i in range(len(uniqueusers))]))     imap = dict(zip(uniqueitems,[i for i in range(len(uniqueitems))]))    trans['user'] = trans.apply(lambda row: umap[row['user']], axis = 1)     trans['item'] = trans.apply(lambda row: imap[row['item']], axis = 1)     return (trans,umap,imap)path = '../Datasets/BookCrossings'os.chdir(path)trans = pd.read_csv('BX-Book-Ratings.csv', sep=';', error_bad_lines=False, encoding="latin-1")trans.columns = ['user','isbn','rating']# print(trans)trans['rating'] = trans['rating'].apply(lambda x: 5 if x == 0 else x)# print(trans)trans['item'] = trans.groupby('isbn').grouper.group_info[0]trans = trans.drop_duplicates()trans = trans.groupby(['user', 'item', 'isbn']).sum().reset_index()# print(trans)trans,umap,imap = maptrans(trans)# print(trans)sparse_item_user = sparse.csr_matrix((trans['rating'].astype(float), (trans['item'],trans['user'])))sparse_user_item = sparse.csr_matrix((trans['rating'].astype(float), (trans['user'],trans['item'])))model = implicit.als.AlternatingLeastSquares(factors=20, regularization=0.1, iterations=50)alpha = 15data = (sparse_item_user * alpha).astype('double')model.fit(data)item_id = 231similar = model.similar_items(item_id)for item, score in similar:     print(score,'\t',trans.isbn.loc[trans.item == item].iloc[0], "\n")print()item_id = 32070similar = model.similar_items(item_id)for item, score in similar:     print(score,'\t',trans.isbn.loc[trans.item == item].iloc[0], "\n")user_id = 0recommendations = model.recommend(user_id, sparse_user_item, filter_already_liked_items=True)for item, score in recommendations:     print(f'{score:0.5f}','\t', trans.isbn.loc[trans.item == item].iloc[0], "\n")print()user_id = 1recommendations = model.recommend(user_id, sparse_user_item, filter_already_liked_items=True)for item, score in recommendations:     print(f'{score:0.5f}','\t', trans.isbn.loc[trans.item == item].iloc[0], "\n")